{"version":3,"sources":["cssSort.js","App.js","serviceWorker.js","index.js"],"names":["splitStyledString","styledString","split","filter","s","killIndentations","ar","map","str","killIndentation","string","slice","sort","mergeStyledStrings","join","indenting","indent","addIndentation","pipe","fns","x","reduce","result","fn","sortStyledStringByAlphabet","Wrapper","styled","div","Table","Row","ActivableRow","props","basis","grow","Input","textarea","App","React","useState","value","setValue","onChange","e","target","onClick","navigator","clipboard","writeText","textContent","then","r","console","log","catch","style","whiteSpace","cssSort","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2OAAMA,EAAoB,SAAAC,GAAY,OAAIA,EAAaC,MAAM,MAAMC,QAAO,SAAAC,GAAC,OAAIA,MAIzEC,EAAmB,SAAAC,GAAE,OAAIA,EAAGC,KAAI,SAAAC,GAAG,OAFjB,SAAlBC,EAAkBC,GAAM,MAAkB,MAAdA,EAAO,GAAaD,EAAgBC,EAAOC,MAAM,IAAMD,EAE5CD,CAAgBD,OAEvDI,EAAO,SAAAN,GAAE,OAAI,YAAIA,GAAIM,QAErBC,EAAqB,SAAAP,GAAE,OAAIA,EAAGQ,KAAK,OAEnCC,EAAY,SAAZA,EAAaT,EAAIU,GAAL,OAA2B,IAAXA,EAAeV,EAAKS,EAAUT,EAAGC,KAAI,SAAAC,GAAG,MAAI,IAAMA,KAAMQ,EAAS,IAE7FC,EAAiB,eAACD,EAAD,uDAAU,EAAV,OAAgB,SAAAV,GAAE,OAAIS,EAAUT,EAAIU,KAErDE,EAAO,SAACC,EAAKC,GAAN,OAAYD,EAAIE,QAC3B,SAACC,EAAQC,GAAT,OAAgBA,EAAGD,KAASF,IAWfI,EARoB,SAACvB,GAAD,IAAee,EAAf,uDAAwB,EAAxB,OAA8BE,EAAK,CACpElB,EACAK,EACAO,EACAC,EACAI,EAAeD,IACdf,I,2+BCpBH,IAAMwB,EAAUC,IAAOC,IAAV,KAEPC,EAAQF,IAAOC,IAAV,KASLE,EAAMH,IAAOC,IAAV,KAQHG,EAAeJ,YAAOG,EAAPH,CAAH,KAOLA,IAAOC,IAAV,KACM,SAAAI,GAAK,OAAIA,EAAMC,OAAS,KACzB,SAAAD,GAAK,OAAIA,EAAME,MAAQ,KAgCtC,IAAMC,EAAQR,IAAOS,SAAV,KASIC,EAtCf,WAAiB,IAAD,EACYC,IAAMC,SAAS,IAD3B,mBACPC,EADO,KACAC,EADA,KAed,OACE,kBAACf,EAAD,KACE,kBAACG,EAAD,KACE,kBAACE,EAAD,KACE,kBAACI,EAAD,CAAOK,MAAOA,EAAOE,SAjBZ,SAAAC,GAAC,OAAIF,EAASE,EAAEC,OAAOJ,WAmBlC,kBAACT,EAAD,CAAcc,QAlBP,SAAAF,GACXG,UAAUC,UAAUC,UAAUL,EAAEC,OAAOK,aAAaC,MAClD,SAAAC,GACEC,QAAQC,IAAI,0BAEdC,OACA,SAAAX,GACES,QAAQC,IAAI,yBAWiBE,MAAO,CAAEC,WAAY,iBAC/CC,EAAQjB,OC7CCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBrB,WACrBA,UAAUsB,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.91b2d259.chunk.js","sourcesContent":["const splitStyledString = styledString => styledString.split('\\n').filter(s => s)\n\nconst killIndentation = string => string[0] === ' ' ? killIndentation(string.slice(1)) : string\n\nconst killIndentations = ar => ar.map(str => killIndentation(str))\n\nconst sort = ar => [...ar].sort()\n\nconst mergeStyledStrings = ar => ar.join('\\n')\n\nconst indenting = (ar, indent) => indent === 0 ? ar : indenting(ar.map(str => ' ' + str), indent - 1)\n\nconst addIndentation = (indent = 0) => ar => indenting(ar, indent)\n\nconst pipe = (fns, x) => fns.reduce(\n  (result, fn) => fn(result), x\n)\n\nconst sortStyledStringByAlphabet = (styledString, indent = 0) => pipe([\n  splitStyledString,\n  killIndentations,\n  sort,\n  mergeStyledStrings,\n  addIndentation(indent)\n], styledString)\n\nexport default sortStyledStringByAlphabet\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport cssSort from './cssSort.js'\nconst Wrapper = styled.div`\n`\nconst Table = styled.div`\n  box-sizing: border-box;\n  border-radius: 8px;\n  box-shadow: 0 0 8px 2px rgba(0, 0, 0, 0.12);\n  overflow: hidden;\n  display: flex;\n  max-width: 800px;\n  margin: 50px auto;\n`\nconst Row = styled.div`\n  box-sizing: border-box;\n  padding: 14px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  font-size: 18px;\n`\nconst ActivableRow = styled(Row)`\n  &:hover {\n    background-color: rgba(49, 34, 210, 0.1);\n    cursor: pointer;\n  }\n  font-size: 18px;\n`\nconst Item = styled.div`\n  flex-basis: ${props => props.basis || 0};\n  flex-grow: ${props => props.grow || 1};\n`\n\nfunction App () {\n  const [value, setValue] = React.useState('')\n  const onChange = e => setValue(e.target.value)\n  const copy = e => {\n    navigator.clipboard.writeText(e.target.textContent).then(\n      r => {\n        console.log('copied to clipBoard')\n      }\n    ).catch(\n      e => {\n        console.log('permission denied')\n      }\n    )\n  }\n  // console.log(cssSort(value))\n  return (\n    <Wrapper>\n      <Table>\n        <ActivableRow>\n          <Input value={value} onChange={onChange} />\n        </ActivableRow>\n        <ActivableRow onClick={copy} style={{ whiteSpace: 'break-spaces' }}>\n          {cssSort(value)}\n        </ActivableRow>\n      </Table>\n    </Wrapper>\n  )\n}\n\nconst Input = styled.textarea`\n  font-size: 18px;\n  width: 100%;\n  height: 300px;\n  padding: 5px;\n  outline: none;\n  font-family: sans-serif;\n`\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}